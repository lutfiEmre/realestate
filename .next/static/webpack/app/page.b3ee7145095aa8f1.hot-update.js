/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CFeaturedHomes.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CFeaturedHomesAlt.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CLocationSelect.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CPropertyType.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CReactRange.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Cimage-component.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Cpublic%5Cimg%5Chome%5Cgray-sofa-white-living-room-interior-with-copy-space-3d-rendering%201.svg&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CFeaturedHomes.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CFeaturedHomesAlt.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CLocationSelect.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CPropertyType.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CReactRange.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Cimage-component.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Cpublic%5Cimg%5Chome%5Cgray-sofa-white-living-room-interior-with-copy-space-3d-rendering%201.svg&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/FeaturedHomes.js */ \"(app-pages-browser)/./components/FeaturedHomes.js\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/FeaturedHomesAlt.js */ \"(app-pages-browser)/./components/FeaturedHomesAlt.js\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/LocationSelect.js */ \"(app-pages-browser)/./components/LocationSelect.js\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/PropertyType.js */ \"(app-pages-browser)/./components/PropertyType.js\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/ReactRange.js */ \"(app-pages-browser)/./components/ReactRange.js\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/image-component.js */ \"(app-pages-browser)/./node_modules/next/dist/client/image-component.js\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./public/img/home/gray-sofa-white-living-room-interior-with-copy-space-3d-rendering 1.svg */ \"(app-pages-browser)/./public/img/home/gray-sofa-white-living-room-interior-with-copy-space-3d-rendering 1.svg\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNlbXJlbCU1Q09uZURyaXZlJTVDTWFzYSVDMyVCQ3N0JUMzJUJDJTVDYnViaXRlY2VrJTVDY29tcG9uZW50cyU1Q0ZlYXR1cmVkSG9tZXMuanMmbW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNlbXJlbCU1Q09uZURyaXZlJTVDTWFzYSVDMyVCQ3N0JUMzJUJDJTVDYnViaXRlY2VrJTVDY29tcG9uZW50cyU1Q0ZlYXR1cmVkSG9tZXNBbHQuanMmbW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNlbXJlbCU1Q09uZURyaXZlJTVDTWFzYSVDMyVCQ3N0JUMzJUJDJTVDYnViaXRlY2VrJTVDY29tcG9uZW50cyU1Q0xvY2F0aW9uU2VsZWN0LmpzJm1vZHVsZXM9QyUzQSU1Q1VzZXJzJTVDZW1yZWwlNUNPbmVEcml2ZSU1Q01hc2ElQzMlQkNzdCVDMyVCQyU1Q2J1Yml0ZWNlayU1Q2NvbXBvbmVudHMlNUNQcm9wZXJ0eVR5cGUuanMmbW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNlbXJlbCU1Q09uZURyaXZlJTVDTWFzYSVDMyVCQ3N0JUMzJUJDJTVDYnViaXRlY2VrJTVDY29tcG9uZW50cyU1Q1JlYWN0UmFuZ2UuanMmbW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNlbXJlbCU1Q09uZURyaXZlJTVDTWFzYSVDMyVCQ3N0JUMzJUJDJTVDYnViaXRlY2VrJTVDbm9kZV9tb2R1bGVzJTVDbmV4dCU1Q2Rpc3QlNUNjbGllbnQlNUNpbWFnZS1jb21wb25lbnQuanMmbW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNlbXJlbCU1Q09uZURyaXZlJTVDTWFzYSVDMyVCQ3N0JUMzJUJDJTVDYnViaXRlY2VrJTVDcHVibGljJTVDaW1nJTVDaG9tZSU1Q2dyYXktc29mYS13aGl0ZS1saXZpbmctcm9vbS1pbnRlcmlvci13aXRoLWNvcHktc3BhY2UtM2QtcmVuZGVyaW5nJTIwMS5zdmcmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSxvTEFBa0g7QUFDbEgsMExBQXFIO0FBQ3JILHNMQUFtSDtBQUNuSCxrTEFBaUg7QUFDakgsOEtBQStHO0FBQy9HLG9PQUEwSTtBQUMxSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvP2I1MjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxlbXJlbFxcXFxPbmVEcml2ZVxcXFxNYXNhw7xzdMO8XFxcXGJ1Yml0ZWNla1xcXFxjb21wb25lbnRzXFxcXEZlYXR1cmVkSG9tZXMuanNcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGVtcmVsXFxcXE9uZURyaXZlXFxcXE1hc2HDvHN0w7xcXFxcYnViaXRlY2VrXFxcXGNvbXBvbmVudHNcXFxcRmVhdHVyZWRIb21lc0FsdC5qc1wiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcZW1yZWxcXFxcT25lRHJpdmVcXFxcTWFzYcO8c3TDvFxcXFxidWJpdGVjZWtcXFxcY29tcG9uZW50c1xcXFxMb2NhdGlvblNlbGVjdC5qc1wiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcZW1yZWxcXFxcT25lRHJpdmVcXFxcTWFzYcO8c3TDvFxcXFxidWJpdGVjZWtcXFxcY29tcG9uZW50c1xcXFxQcm9wZXJ0eVR5cGUuanNcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXGVtcmVsXFxcXE9uZURyaXZlXFxcXE1hc2HDvHN0w7xcXFxcYnViaXRlY2VrXFxcXGNvbXBvbmVudHNcXFxcUmVhY3RSYW5nZS5qc1wiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcZW1yZWxcXFxcT25lRHJpdmVcXFxcTWFzYcO8c3TDvFxcXFxidWJpdGVjZWtcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZGlzdFxcXFxjbGllbnRcXFxcaW1hZ2UtY29tcG9uZW50LmpzXCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxlbXJlbFxcXFxPbmVEcml2ZVxcXFxNYXNhw7xzdMO8XFxcXGJ1Yml0ZWNla1xcXFxwdWJsaWNcXFxcaW1nXFxcXGhvbWVcXFxcZ3JheS1zb2ZhLXdoaXRlLWxpdmluZy1yb29tLWludGVyaW9yLXdpdGgtY29weS1zcGFjZS0zZC1yZW5kZXJpbmcgMS5zdmdcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CFeaturedHomes.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CFeaturedHomesAlt.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CLocationSelect.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CPropertyType.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Ccomponents%5CReactRange.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Cimage-component.js&modules=C%3A%5CUsers%5Cemrel%5COneDrive%5CMasa%C3%BCst%C3%BC%5Cbubitecek%5Cpublic%5Cimg%5Chome%5Cgray-sofa-white-living-room-interior-with-copy-space-3d-rendering%201.svg&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-range/lib/Range.js":
/*!***********************************************!*\
  !*** ./node_modules/react-range/lib/Range.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __importStar(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/react-range/lib/utils.js\");\nvar types_1 = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/react-range/lib/types.js\");\nvar INCREASE_KEYS = [\n    \"ArrowRight\",\n    \"ArrowUp\",\n    \"k\",\n    \"PageUp\"\n];\nvar DECREASE_KEYS = [\n    \"ArrowLeft\",\n    \"ArrowDown\",\n    \"j\",\n    \"PageDown\"\n];\nvar Range = /** @class */ function(_super) {\n    __extends(Range, _super);\n    function Range(props) {\n        var _this = _super.call(this, props) || this;\n        _this.trackRef = React.createRef();\n        _this.thumbRefs = [];\n        _this.state = {\n            draggedTrackPos: [\n                -1,\n                -1\n            ],\n            draggedThumbIndex: -1,\n            thumbZIndexes: new Array(_this.props.values.length).fill(0).map(function(t, i) {\n                return i;\n            }),\n            isChanged: false,\n            markOffsets: []\n        };\n        _this.getOffsets = function() {\n            var _a = _this.props, direction = _a.direction, values = _a.values, min = _a.min, max = _a.max;\n            var trackElement = _this.trackRef.current;\n            var trackRect = trackElement.getBoundingClientRect();\n            var trackPadding = (0, utils_1.getPaddingAndBorder)(trackElement);\n            return _this.getThumbs().map(function(thumb, index) {\n                var thumbOffsets = {\n                    x: 0,\n                    y: 0\n                };\n                var thumbRect = thumb.getBoundingClientRect();\n                var thumbMargins = (0, utils_1.getMargin)(thumb);\n                switch(direction){\n                    case types_1.Direction.Right:\n                        thumbOffsets.x = (thumbMargins.left + trackPadding.left) * -1;\n                        thumbOffsets.y = ((thumbRect.height - trackRect.height) / 2 + trackPadding.top) * -1;\n                        thumbOffsets.x += trackRect.width * (0, utils_1.relativeValue)(values[index], min, max) - thumbRect.width / 2;\n                        return thumbOffsets;\n                    case types_1.Direction.Left:\n                        thumbOffsets.x = (thumbMargins.right + trackPadding.right) * -1;\n                        thumbOffsets.y = ((thumbRect.height - trackRect.height) / 2 + trackPadding.top) * -1;\n                        thumbOffsets.x += trackRect.width - trackRect.width * (0, utils_1.relativeValue)(values[index], min, max) - thumbRect.width / 2;\n                        return thumbOffsets;\n                    case types_1.Direction.Up:\n                        thumbOffsets.x = ((thumbRect.width - trackRect.width) / 2 + thumbMargins.left + trackPadding.left) * -1;\n                        thumbOffsets.y = -trackPadding.left;\n                        thumbOffsets.y += trackRect.height - trackRect.height * (0, utils_1.relativeValue)(values[index], min, max) - thumbRect.height / 2;\n                        return thumbOffsets;\n                    case types_1.Direction.Down:\n                        thumbOffsets.x = ((thumbRect.width - trackRect.width) / 2 + thumbMargins.left + trackPadding.left) * -1;\n                        thumbOffsets.y = -trackPadding.left;\n                        thumbOffsets.y += trackRect.height * (0, utils_1.relativeValue)(values[index], min, max) - thumbRect.height / 2;\n                        return thumbOffsets;\n                    default:\n                        return (0, utils_1.assertUnreachable)(direction);\n                }\n            });\n        };\n        _this.getThumbs = function() {\n            if (_this.trackRef && _this.trackRef.current) {\n                return Array.from(_this.trackRef.current.children).filter(function(el) {\n                    return el.hasAttribute(\"aria-valuenow\");\n                });\n            }\n            console.warn(\"No thumbs found in the track container. Did you forget to pass & spread the `props` param in renderTrack?\");\n            return [];\n        };\n        _this.getTargetIndex = function(e) {\n            return _this.getThumbs().findIndex(function(child) {\n                return child === e.target || child.contains(e.target);\n            });\n        };\n        _this.addTouchEvents = function(e) {\n            document.addEventListener(\"touchmove\", _this.schdOnTouchMove, {\n                passive: false\n            });\n            document.addEventListener(\"touchend\", _this.schdOnEnd, {\n                passive: false\n            });\n            document.addEventListener(\"touchcancel\", _this.schdOnEnd, {\n                passive: false\n            });\n        };\n        _this.addMouseEvents = function(e) {\n            document.addEventListener(\"mousemove\", _this.schdOnMouseMove);\n            document.addEventListener(\"mouseup\", _this.schdOnEnd);\n        };\n        _this.onMouseDownTrack = function(e) {\n            var _a;\n            if (e.button !== 0) return;\n            e.persist();\n            e.preventDefault();\n            _this.addMouseEvents(e.nativeEvent);\n            if (_this.props.values.length > 1 && _this.props.draggableTrack) {\n                if (_this.thumbRefs.some(function(thumbRef) {\n                    var _a;\n                    return (_a = thumbRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target);\n                })) return;\n                // handle dragging the whole track\n                _this.setState({\n                    draggedTrackPos: [\n                        e.clientX,\n                        e.clientY\n                    ]\n                }, function() {\n                    return _this.onMove(e.clientX, e.clientY);\n                });\n            } else {\n                // get the index of the thumb that is closest to the place where the track is clicked\n                var draggedThumbIndex = (0, utils_1.getClosestThumbIndex)(_this.thumbRefs.map(function(t) {\n                    return t.current;\n                }), e.clientX, e.clientY, _this.props.direction);\n                // move the thumb which is closest to the place where the track is clicked\n                (_a = _this.thumbRefs[draggedThumbIndex].current) === null || _a === void 0 ? void 0 : _a.focus();\n                _this.setState({\n                    draggedThumbIndex: draggedThumbIndex\n                }, function() {\n                    return _this.onMove(e.clientX, e.clientY);\n                });\n            }\n        };\n        _this.onResize = function() {\n            (0, utils_1.translateThumbs)(_this.getThumbs(), _this.getOffsets(), _this.props.rtl);\n            _this.calculateMarkOffsets();\n        };\n        _this.onTouchStartTrack = function(e) {\n            var _a;\n            e.persist();\n            _this.addTouchEvents(e.nativeEvent);\n            if (_this.props.values.length > 1 && _this.props.draggableTrack) {\n                if (_this.thumbRefs.some(function(thumbRef) {\n                    var _a;\n                    return (_a = thumbRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target);\n                })) return;\n                // handle dragging the whole track\n                _this.setState({\n                    draggedTrackPos: [\n                        e.touches[0].clientX,\n                        e.touches[0].clientY\n                    ]\n                }, function() {\n                    return _this.onMove(e.touches[0].clientX, e.touches[0].clientY);\n                });\n            } else {\n                // get the index of the thumb that is closest to the place where the track is clicked\n                var draggedThumbIndex = (0, utils_1.getClosestThumbIndex)(_this.thumbRefs.map(function(t) {\n                    return t.current;\n                }), e.touches[0].clientX, e.touches[0].clientY, _this.props.direction);\n                // move the thumb which is closest to the place where the track is clicked\n                (_a = _this.thumbRefs[draggedThumbIndex].current) === null || _a === void 0 ? void 0 : _a.focus();\n                _this.setState({\n                    draggedThumbIndex: draggedThumbIndex\n                }, function() {\n                    return _this.onMove(e.touches[0].clientX, e.touches[0].clientY);\n                });\n            }\n        };\n        _this.onMouseOrTouchStart = function(e) {\n            if (_this.props.disabled) return;\n            var isTouch = (0, utils_1.isTouchEvent)(e);\n            if (!isTouch && e.button !== 0) return;\n            var index = _this.getTargetIndex(e);\n            if (index === -1) return;\n            if (isTouch) {\n                _this.addTouchEvents(e);\n            } else {\n                _this.addMouseEvents(e);\n            }\n            _this.setState({\n                draggedThumbIndex: index,\n                thumbZIndexes: _this.state.thumbZIndexes.map(function(t, i) {\n                    if (i === index) {\n                        return Math.max.apply(Math, _this.state.thumbZIndexes);\n                    }\n                    return t <= _this.state.thumbZIndexes[index] ? t : t - 1;\n                })\n            });\n        };\n        _this.onMouseMove = function(e) {\n            e.preventDefault();\n            _this.onMove(e.clientX, e.clientY);\n        };\n        _this.onTouchMove = function(e) {\n            e.preventDefault();\n            _this.onMove(e.touches[0].clientX, e.touches[0].clientY);\n        };\n        _this.onKeyDown = function(e) {\n            var _a = _this.props, values = _a.values, onChange = _a.onChange, step = _a.step, rtl = _a.rtl, direction = _a.direction;\n            var isChanged = _this.state.isChanged;\n            var index = _this.getTargetIndex(e.nativeEvent);\n            var inverter = rtl || direction === types_1.Direction.Left || direction === types_1.Direction.Down ? -1 : 1;\n            if (index === -1) return;\n            if (INCREASE_KEYS.includes(e.key)) {\n                e.preventDefault();\n                _this.setState({\n                    draggedThumbIndex: index,\n                    isChanged: true\n                });\n                onChange((0, utils_1.replaceAt)(values, index, _this.normalizeValue(values[index] + inverter * (e.key === \"PageUp\" ? step * 10 : step), index)));\n            } else if (DECREASE_KEYS.includes(e.key)) {\n                e.preventDefault();\n                _this.setState({\n                    draggedThumbIndex: index,\n                    isChanged: true\n                });\n                onChange((0, utils_1.replaceAt)(values, index, _this.normalizeValue(values[index] - inverter * (e.key === \"PageDown\" ? step * 10 : step), index)));\n            } else if (e.key === \"Tab\") {\n                _this.setState({\n                    draggedThumbIndex: -1\n                }, function() {\n                    // If key pressed when thumb was moving, fire onFinalChange\n                    if (isChanged) {\n                        _this.fireOnFinalChange();\n                    }\n                });\n            } else {\n                if (isChanged) {\n                    _this.fireOnFinalChange();\n                }\n            }\n        };\n        _this.onKeyUp = function(e) {\n            var isChanged = _this.state.isChanged;\n            _this.setState({\n                draggedThumbIndex: -1\n            }, function() {\n                if (isChanged) {\n                    _this.fireOnFinalChange();\n                }\n            });\n        };\n        _this.onMove = function(clientX, clientY) {\n            var _a = _this.state, draggedThumbIndex = _a.draggedThumbIndex, draggedTrackPos = _a.draggedTrackPos;\n            var _b = _this.props, direction = _b.direction, min = _b.min, max = _b.max, onChange = _b.onChange, values = _b.values, step = _b.step, rtl = _b.rtl;\n            if (draggedThumbIndex === -1 && draggedTrackPos[0] === -1 && draggedTrackPos[1] === -1) return null;\n            var trackElement = _this.trackRef.current;\n            // If component was closed down prematurely, A last onMove could be triggered based on requestAnimationFrame()\n            if (!trackElement) return null;\n            var trackRect = trackElement.getBoundingClientRect();\n            var trackLength = (0, utils_1.isVertical)(direction) ? trackRect.height : trackRect.width;\n            if (draggedTrackPos[0] !== -1 && draggedTrackPos[1] !== -1) {\n                // calculate how much it moved since the last update\n                var dX = clientX - draggedTrackPos[0];\n                var dY = clientY - draggedTrackPos[1];\n                // calculate the delta of the value\n                var deltaValue = 0;\n                switch(direction){\n                    case types_1.Direction.Right:\n                    case types_1.Direction.Left:\n                        deltaValue = dX / trackLength * (max - min);\n                        break;\n                    case types_1.Direction.Down:\n                    case types_1.Direction.Up:\n                        deltaValue = dY / trackLength * (max - min);\n                        break;\n                    default:\n                        (0, utils_1.assertUnreachable)(direction);\n                }\n                // invert for RTL\n                if (rtl) {\n                    deltaValue *= -1;\n                }\n                if (Math.abs(deltaValue) >= step / 2) {\n                    // adjust delta so it fits into the range\n                    for(var i = 0; i < _this.thumbRefs.length; i++){\n                        if (values[i] === max && Math.sign(deltaValue) === 1 || values[i] === min && Math.sign(deltaValue) === -1) return;\n                        var thumbValue = values[i] + deltaValue;\n                        if (thumbValue > max) deltaValue = max - values[i];\n                        else if (thumbValue < min) deltaValue = min - values[i];\n                    }\n                    // add the delta to each thumb\n                    var newValues = values.slice(0);\n                    for(var i = 0; i < _this.thumbRefs.length; i++){\n                        newValues = (0, utils_1.replaceAt)(newValues, i, _this.normalizeValue(values[i] + deltaValue, i));\n                    }\n                    _this.setState({\n                        draggedTrackPos: [\n                            clientX,\n                            clientY\n                        ]\n                    });\n                    onChange(newValues);\n                }\n            } else {\n                var newValue = 0;\n                switch(direction){\n                    case types_1.Direction.Right:\n                        newValue = (clientX - trackRect.left) / trackLength * (max - min) + min;\n                        break;\n                    case types_1.Direction.Left:\n                        newValue = (trackLength - (clientX - trackRect.left)) / trackLength * (max - min) + min;\n                        break;\n                    case types_1.Direction.Down:\n                        newValue = (clientY - trackRect.top) / trackLength * (max - min) + min;\n                        break;\n                    case types_1.Direction.Up:\n                        newValue = (trackLength - (clientY - trackRect.top)) / trackLength * (max - min) + min;\n                        break;\n                    default:\n                        (0, utils_1.assertUnreachable)(direction);\n                }\n                // invert for RTL\n                if (rtl) {\n                    newValue = max + min - newValue;\n                }\n                if (Math.abs(values[draggedThumbIndex] - newValue) >= step / 2) {\n                    onChange((0, utils_1.replaceAt)(values, draggedThumbIndex, _this.normalizeValue(newValue, draggedThumbIndex)));\n                }\n            }\n        };\n        _this.normalizeValue = function(value, index) {\n            var _a = _this.props, min = _a.min, max = _a.max, step = _a.step, allowOverlap = _a.allowOverlap, values = _a.values;\n            return (0, utils_1.normalizeValue)(value, index, min, max, step, allowOverlap, values);\n        };\n        _this.onEnd = function(e) {\n            e.preventDefault();\n            document.removeEventListener(\"mousemove\", _this.schdOnMouseMove);\n            document.removeEventListener(\"touchmove\", _this.schdOnTouchMove);\n            document.removeEventListener(\"mouseup\", _this.schdOnEnd);\n            document.removeEventListener(\"touchend\", _this.schdOnEnd);\n            document.removeEventListener(\"touchcancel\", _this.schdOnEnd);\n            if (_this.state.draggedThumbIndex === -1 && _this.state.draggedTrackPos[0] === -1 && _this.state.draggedTrackPos[1] === -1) return null;\n            _this.setState({\n                draggedThumbIndex: -1,\n                draggedTrackPos: [\n                    -1,\n                    -1\n                ]\n            }, function() {\n                _this.fireOnFinalChange();\n            });\n        };\n        _this.fireOnFinalChange = function() {\n            _this.setState({\n                isChanged: false\n            });\n            var _a = _this.props, onFinalChange = _a.onFinalChange, values = _a.values;\n            if (onFinalChange) {\n                onFinalChange(values);\n            }\n        };\n        _this.updateMarkRefs = function(props) {\n            if (!props.renderMark) {\n                _this.numOfMarks = undefined;\n                _this.markRefs = undefined;\n                return;\n            }\n            _this.numOfMarks = (props.max - props.min) / _this.props.step;\n            _this.markRefs = [];\n            for(var i = 0; i < _this.numOfMarks + 1; i++){\n                _this.markRefs[i] = React.createRef();\n            }\n        };\n        _this.calculateMarkOffsets = function() {\n            if (!_this.props.renderMark || !_this.trackRef || !_this.numOfMarks || !_this.markRefs || _this.trackRef.current === null) return;\n            var elStyles = window.getComputedStyle(_this.trackRef.current);\n            var trackWidth = parseInt(elStyles.width, 10);\n            var trackHeight = parseInt(elStyles.height, 10);\n            var paddingLeft = parseInt(elStyles.paddingLeft, 10);\n            var paddingTop = parseInt(elStyles.paddingTop, 10);\n            var res = [];\n            for(var i = 0; i < _this.numOfMarks + 1; i++){\n                var markHeight = 9999;\n                var markWidth = 9999;\n                if (_this.markRefs[i].current) {\n                    var markRect = _this.markRefs[i].current.getBoundingClientRect();\n                    markHeight = markRect.height;\n                    markWidth = markRect.width;\n                }\n                if (_this.props.direction === types_1.Direction.Left || _this.props.direction === types_1.Direction.Right) {\n                    res.push([\n                        Math.round(trackWidth / _this.numOfMarks * i + paddingLeft - markWidth / 2),\n                        -Math.round((markHeight - trackHeight) / 2)\n                    ]);\n                } else {\n                    res.push([\n                        Math.round(trackHeight / _this.numOfMarks * i + paddingTop - markHeight / 2),\n                        -Math.round((markWidth - trackWidth) / 2)\n                    ]);\n                }\n            }\n            _this.setState({\n                markOffsets: res\n            });\n        };\n        if (props.step === 0) {\n            throw new Error('\"step\" property should be a positive number');\n        }\n        _this.schdOnMouseMove = (0, utils_1.schd)(_this.onMouseMove);\n        _this.schdOnTouchMove = (0, utils_1.schd)(_this.onTouchMove);\n        _this.schdOnEnd = (0, utils_1.schd)(_this.onEnd);\n        _this.thumbRefs = props.values.map(function() {\n            return React.createRef();\n        });\n        _this.updateMarkRefs(props);\n        return _this;\n    }\n    Range.prototype.componentDidMount = function() {\n        var _this = this;\n        var _a = this.props, values = _a.values, min = _a.min, step = _a.step;\n        this.resizeObserver = window.ResizeObserver ? new window.ResizeObserver(this.onResize) : {\n            observe: function() {\n                return window.addEventListener(\"resize\", _this.onResize);\n            },\n            unobserve: function() {\n                return window.removeEventListener(\"resize\", _this.onResize);\n            }\n        };\n        document.addEventListener(\"touchstart\", this.onMouseOrTouchStart, {\n            passive: false\n        });\n        document.addEventListener(\"mousedown\", this.onMouseOrTouchStart, {\n            passive: false\n        });\n        !this.props.allowOverlap && (0, utils_1.checkInitialOverlap)(this.props.values);\n        this.props.values.forEach(function(value) {\n            return (0, utils_1.checkBoundaries)(value, _this.props.min, _this.props.max);\n        });\n        this.resizeObserver.observe(this.trackRef.current);\n        (0, utils_1.translateThumbs)(this.getThumbs(), this.getOffsets(), this.props.rtl);\n        this.calculateMarkOffsets();\n        values.forEach(function(value) {\n            if (!(0, utils_1.isStepDivisible)(min, value, step)) {\n                console.warn(\"The `values` property is in conflict with the current `step`, `min`, and `max` properties. Please provide values that are accessible using the min, max, and step values.\");\n            }\n        });\n    };\n    Range.prototype.componentDidUpdate = function(prevProps, prevState) {\n        var _a = this.props, max = _a.max, min = _a.min, step = _a.step, values = _a.values, rtl = _a.rtl;\n        if (prevProps.max !== max || prevProps.min !== min || prevProps.step !== step) {\n            this.updateMarkRefs(this.props);\n        }\n        (0, utils_1.translateThumbs)(this.getThumbs(), this.getOffsets(), rtl);\n        // ensure offsets are calculated when the refs for the marks have been created\n        // and those refs have been mounted to the dom\n        // on the state update in calculateOffsets with new markOffsets are calculated\n        if (prevProps.max !== max || prevProps.min !== min || prevProps.step !== step || prevState.markOffsets.length !== this.state.markOffsets.length) {\n            this.calculateMarkOffsets();\n            values.forEach(function(value) {\n                if (!(0, utils_1.isStepDivisible)(min, value, step)) {\n                    console.warn(\"The `values` property is in conflict with the current `step`, `min`, and `max` properties. Please provide values that are accessible using the min, max, and step values.\");\n                }\n            });\n        }\n    };\n    Range.prototype.componentWillUnmount = function() {\n        var options = {\n            passive: false\n        };\n        document.removeEventListener(\"mousedown\", this.onMouseOrTouchStart, options);\n        // These need to be removed!!\n        document.removeEventListener(\"mousemove\", this.schdOnMouseMove);\n        document.removeEventListener(\"touchmove\", this.schdOnTouchMove);\n        document.removeEventListener(\"touchstart\", this.onMouseOrTouchStart);\n        document.removeEventListener(\"mouseup\", this.schdOnEnd);\n        document.removeEventListener(\"touchend\", this.schdOnEnd);\n        this.resizeObserver.unobserve(this.trackRef.current);\n    };\n    Range.prototype.render = function() {\n        var _this = this;\n        var _a = this.props, renderTrack = _a.renderTrack, renderThumb = _a.renderThumb, _b = _a.renderMark, renderMark = _b === void 0 ? function() {\n            return null;\n        } : _b, values = _a.values, min = _a.min, max = _a.max, allowOverlap = _a.allowOverlap, disabled = _a.disabled;\n        var _c = this.state, draggedThumbIndex = _c.draggedThumbIndex, thumbZIndexes = _c.thumbZIndexes, markOffsets = _c.markOffsets;\n        return renderTrack({\n            props: {\n                style: {\n                    // creates stacking context that prevents z-index applied to thumbs\n                    // interfere with other elements\n                    transform: \"scale(1)\",\n                    cursor: draggedThumbIndex > -1 ? \"grabbing\" : this.props.draggableTrack ? (0, utils_1.isVertical)(this.props.direction) ? \"ns-resize\" : \"ew-resize\" : values.length === 1 && !disabled ? \"pointer\" : \"inherit\"\n                },\n                onMouseDown: disabled ? utils_1.voidFn : this.onMouseDownTrack,\n                onTouchStart: disabled ? utils_1.voidFn : this.onTouchStartTrack,\n                ref: this.trackRef\n            },\n            isDragged: this.state.draggedThumbIndex > -1,\n            disabled: disabled,\n            children: __spreadArray(__spreadArray([], markOffsets.map(function(offset, index, arr) {\n                return renderMark({\n                    props: {\n                        style: _this.props.direction === types_1.Direction.Left || _this.props.direction === types_1.Direction.Right ? {\n                            position: \"absolute\",\n                            left: \"\".concat(offset[0], \"px\"),\n                            marginTop: \"\".concat(offset[1], \"px\")\n                        } : {\n                            position: \"absolute\",\n                            top: \"\".concat(offset[0], \"px\"),\n                            marginLeft: \"\".concat(offset[1], \"px\")\n                        },\n                        key: \"mark\".concat(index),\n                        ref: _this.markRefs[index]\n                    },\n                    index: index\n                });\n            }), true), values.map(function(value, index) {\n                var isDragged = _this.state.draggedThumbIndex === index;\n                return renderThumb({\n                    index: index,\n                    value: value,\n                    isDragged: isDragged,\n                    props: {\n                        style: {\n                            position: \"absolute\",\n                            zIndex: thumbZIndexes[index],\n                            cursor: disabled ? \"inherit\" : isDragged ? \"grabbing\" : \"grab\",\n                            userSelect: \"none\",\n                            touchAction: \"none\",\n                            WebkitUserSelect: \"none\",\n                            MozUserSelect: \"none\",\n                            msUserSelect: \"none\"\n                        },\n                        key: index,\n                        tabIndex: disabled ? undefined : 0,\n                        \"aria-valuemax\": allowOverlap ? max : values[index + 1] || max,\n                        \"aria-valuemin\": allowOverlap ? min : values[index - 1] || min,\n                        \"aria-valuenow\": value,\n                        draggable: false,\n                        ref: _this.thumbRefs[index],\n                        role: \"slider\",\n                        onKeyDown: disabled ? utils_1.voidFn : _this.onKeyDown,\n                        onKeyUp: disabled ? utils_1.voidFn : _this.onKeyUp\n                    }\n                });\n            }), true)\n        });\n    };\n    Range.defaultProps = {\n        step: 1,\n        direction: types_1.Direction.Right,\n        rtl: false,\n        disabled: false,\n        allowOverlap: false,\n        draggableTrack: false,\n        min: 0,\n        max: 100\n    };\n    return Range;\n}(React.Component);\nexports[\"default\"] = Range;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-range/lib/Range.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-range/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/react-range/lib/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checkValuesAgainstBoundaries = exports.relativeValue = exports.useThumbOverlap = exports.Direction = exports.getTrackBackground = exports.Range = void 0;\nvar Range_1 = __importDefault(__webpack_require__(/*! ./Range */ \"(app-pages-browser)/./node_modules/react-range/lib/Range.js\"));\nexports.Range = Range_1.default;\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/react-range/lib/utils.js\");\nObject.defineProperty(exports, \"getTrackBackground\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.getTrackBackground;\n    }\n}));\nObject.defineProperty(exports, \"useThumbOverlap\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.useThumbOverlap;\n    }\n}));\nObject.defineProperty(exports, \"relativeValue\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.relativeValue;\n    }\n}));\nObject.defineProperty(exports, \"checkValuesAgainstBoundaries\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.checkValuesAgainstBoundaries;\n    }\n}));\nvar types_1 = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/react-range/lib/types.js\");\nObject.defineProperty(exports, \"Direction\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.Direction;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yYW5nZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9DQUFvQyxHQUFHQSxxQkFBcUIsR0FBR0EsdUJBQXVCLEdBQUdBLGlCQUFpQixHQUFHQSwwQkFBMEIsR0FBR0EsYUFBYSxHQUFHLEtBQUs7QUFDL0osSUFBSVEsVUFBVWIsZ0JBQWdCYyxtQkFBT0EsQ0FBQyw0RUFBUztBQUMvQ1QsYUFBYSxHQUFHUSxRQUFRRSxPQUFPO0FBQy9CLElBQUlDLFVBQVVGLG1CQUFPQSxDQUFDLDRFQUFTO0FBQy9CWCxzREFBcUQ7SUFBRWMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsUUFBUUwsa0JBQWtCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbklSLG1EQUFrRDtJQUFFYyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixRQUFRUCxlQUFlO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0hOLGlEQUFnRDtJQUFFYyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixRQUFRUixhQUFhO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDekhMLGdFQUErRDtJQUFFYyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixRQUFRVCw0QkFBNEI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SixJQUFJWSxVQUFVTCxtQkFBT0EsQ0FBQyw0RUFBUztBQUMvQlgsNkNBQTRDO0lBQUVjLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFFBQVFULFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmFuZ2UvbGliL2luZGV4LmpzP2MxOTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNoZWNrVmFsdWVzQWdhaW5zdEJvdW5kYXJpZXMgPSBleHBvcnRzLnJlbGF0aXZlVmFsdWUgPSBleHBvcnRzLnVzZVRodW1iT3ZlcmxhcCA9IGV4cG9ydHMuRGlyZWN0aW9uID0gZXhwb3J0cy5nZXRUcmFja0JhY2tncm91bmQgPSBleHBvcnRzLlJhbmdlID0gdm9pZCAwO1xudmFyIFJhbmdlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUmFuZ2VcIikpO1xuZXhwb3J0cy5SYW5nZSA9IFJhbmdlXzEuZGVmYXVsdDtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRUcmFja0JhY2tncm91bmRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuZ2V0VHJhY2tCYWNrZ3JvdW5kOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlVGh1bWJPdmVybGFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLnVzZVRodW1iT3ZlcmxhcDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbGF0aXZlVmFsdWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEucmVsYXRpdmVWYWx1ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNoZWNrVmFsdWVzQWdhaW5zdEJvdW5kYXJpZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuY2hlY2tWYWx1ZXNBZ2FpbnN0Qm91bmRhcmllczsgfSB9KTtcbnZhciB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXJlY3Rpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzXzEuRGlyZWN0aW9uOyB9IH0pO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoZWNrVmFsdWVzQWdhaW5zdEJvdW5kYXJpZXMiLCJyZWxhdGl2ZVZhbHVlIiwidXNlVGh1bWJPdmVybGFwIiwiRGlyZWN0aW9uIiwiZ2V0VHJhY2tCYWNrZ3JvdW5kIiwiUmFuZ2UiLCJSYW5nZV8xIiwicmVxdWlyZSIsImRlZmF1bHQiLCJ1dGlsc18xIiwiZW51bWVyYWJsZSIsImdldCIsInR5cGVzXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-range/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-range/lib/types.js":
/*!***********************************************!*\
  !*** ./node_modules/react-range/lib/types.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Direction = void 0;\nvar Direction;\n(function(Direction) {\n    Direction[\"Right\"] = \"to right\";\n    Direction[\"Left\"] = \"to left\";\n    Direction[\"Down\"] = \"to bottom\";\n    Direction[\"Up\"] = \"to top\";\n})(Direction = exports.Direction || (exports.Direction = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yYW5nZS9saWIvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsSUFBSUU7QUFDSCxVQUFVQSxTQUFTO0lBQ2hCQSxTQUFTLENBQUMsUUFBUSxHQUFHO0lBQ3JCQSxTQUFTLENBQUMsT0FBTyxHQUFHO0lBQ3BCQSxTQUFTLENBQUMsT0FBTyxHQUFHO0lBQ3BCQSxTQUFTLENBQUMsS0FBSyxHQUFHO0FBQ3RCLEdBQUdBLFlBQVlGLFFBQVFFLFNBQVMsSUFBS0YsQ0FBQUEsaUJBQWlCLEdBQUcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmFuZ2UvbGliL3R5cGVzLmpzP2I0MTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpcmVjdGlvbiA9IHZvaWQgMDtcbnZhciBEaXJlY3Rpb247XG4oZnVuY3Rpb24gKERpcmVjdGlvbikge1xuICAgIERpcmVjdGlvbltcIlJpZ2h0XCJdID0gXCJ0byByaWdodFwiO1xuICAgIERpcmVjdGlvbltcIkxlZnRcIl0gPSBcInRvIGxlZnRcIjtcbiAgICBEaXJlY3Rpb25bXCJEb3duXCJdID0gXCJ0byBib3R0b21cIjtcbiAgICBEaXJlY3Rpb25bXCJVcFwiXSA9IFwidG8gdG9wXCI7XG59KShEaXJlY3Rpb24gPSBleHBvcnRzLkRpcmVjdGlvbiB8fCAoZXhwb3J0cy5EaXJlY3Rpb24gPSB7fSkpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRGlyZWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-range/lib/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-range/lib/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/react-range/lib/utils.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useThumbOverlap = exports.assertUnreachable = exports.voidFn = exports.getTrackBackground = exports.replaceAt = exports.schd = exports.translate = exports.getClosestThumbIndex = exports.translateThumbs = exports.getPaddingAndBorder = exports.getMargin = exports.checkInitialOverlap = exports.checkValuesAgainstBoundaries = exports.checkBoundaries = exports.isVertical = exports.relativeValue = exports.normalizeValue = exports.isStepDivisible = exports.isTouchEvent = exports.getStepDecimals = void 0;\nvar react_1 = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar types_1 = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/react-range/lib/types.js\");\nvar getStepDecimals = function(step) {\n    var decimals = step.toString().split(\".\")[1];\n    return decimals ? decimals.length : 0;\n};\nexports.getStepDecimals = getStepDecimals;\nfunction isTouchEvent(event) {\n    return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;\n}\nexports.isTouchEvent = isTouchEvent;\nfunction isStepDivisible(min, max, step) {\n    var res = (max - min) / step;\n    var precision = 8;\n    var roundedRes = Number(res.toFixed(precision));\n    return parseInt(roundedRes.toString(), 10) === roundedRes;\n}\nexports.isStepDivisible = isStepDivisible;\nfunction normalizeValue(value, index, min, max, step, allowOverlap, values) {\n    var BIG_NUM = 10e10;\n    value = Math.round(value * BIG_NUM) / BIG_NUM;\n    if (!allowOverlap) {\n        var prev = values[index - 1];\n        var next = values[index + 1];\n        if (prev && prev > value) return prev;\n        if (next && next < value) return next;\n    }\n    if (value > max) return max;\n    if (value < min) return min;\n    // `remainder` is a difference between the given value and a full step value\n    // that is closest lower to the given value and is in the range between the min value\n    // and the given value\n    var remainder = Math.floor(value * BIG_NUM - min * BIG_NUM) % Math.floor(step * BIG_NUM);\n    var closestLowerNum = Math.floor(value * BIG_NUM - Math.abs(remainder));\n    var rounded = remainder === 0 ? value : closestLowerNum / BIG_NUM;\n    // Values with a remainder `< step/2` are rounded to the closest lower value\n    // while values with a remainder `= > step/2` are rounded to the closest bigger value\n    var res = Math.abs(remainder / BIG_NUM) < step / 2 ? rounded : rounded + step;\n    var decimalPlaces = (0, exports.getStepDecimals)(step);\n    return parseFloat(res.toFixed(decimalPlaces));\n}\nexports.normalizeValue = normalizeValue;\nfunction relativeValue(value, min, max) {\n    return (value - min) / (max - min);\n}\nexports.relativeValue = relativeValue;\nfunction isVertical(direction) {\n    return direction === types_1.Direction.Up || direction === types_1.Direction.Down;\n}\nexports.isVertical = isVertical;\nfunction checkBoundaries(value, min, max) {\n    if (min >= max) {\n        throw new RangeError(\"min (\".concat(min, \") is equal/bigger than max (\").concat(max, \")\"));\n    }\n    if (value < min) {\n        throw new RangeError(\"value (\".concat(value, \") is smaller than min (\").concat(min, \")\"));\n    }\n    if (value > max) {\n        throw new RangeError(\"value (\".concat(value, \") is bigger than max (\").concat(max, \")\"));\n    }\n}\nexports.checkBoundaries = checkBoundaries;\nfunction checkValuesAgainstBoundaries(value, min, max) {\n    if (value < min) {\n        // set selectedValue to min\n        return min;\n    }\n    if (value > max) {\n        // set selectedValue to max\n        return max;\n    } else {\n        return value;\n    }\n}\nexports.checkValuesAgainstBoundaries = checkValuesAgainstBoundaries;\nfunction checkInitialOverlap(values) {\n    if (values.length < 2) return;\n    if (!values.slice(1).every(function(item, i) {\n        return values[i] <= item;\n    })) {\n        throw new RangeError(\"values={[\".concat(values, \"]} needs to be sorted when allowOverlap={false}\"));\n    }\n}\nexports.checkInitialOverlap = checkInitialOverlap;\nfunction getMargin(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        top: parseInt(style[\"margin-top\"], 10),\n        bottom: parseInt(style[\"margin-bottom\"], 10),\n        left: parseInt(style[\"margin-left\"], 10),\n        right: parseInt(style[\"margin-right\"], 10)\n    };\n}\nexports.getMargin = getMargin;\nfunction getPaddingAndBorder(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        top: parseInt(style[\"padding-top\"], 10) + parseInt(style[\"border-top-width\"], 10),\n        bottom: parseInt(style[\"padding-bottom\"], 10) + parseInt(style[\"border-bottom-width\"], 10),\n        left: parseInt(style[\"padding-left\"], 10) + parseInt(style[\"border-left-width\"], 10),\n        right: parseInt(style[\"padding-right\"], 10) + parseInt(style[\"border-right-width\"], 10)\n    };\n}\nexports.getPaddingAndBorder = getPaddingAndBorder;\nfunction translateThumbs(elements, offsets, rtl) {\n    var inverter = rtl ? -1 : 1;\n    elements.forEach(function(element, index) {\n        return translate(element, inverter * offsets[index].x, offsets[index].y);\n    });\n}\nexports.translateThumbs = translateThumbs;\n/**\n * Util function for calculating the index of the thumb that is closes to a given position\n * @param thumbs - array of Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */ function getClosestThumbIndex(thumbs, clientX, clientY, direction) {\n    var thumbIndex = 0;\n    var minThumbDistance = getThumbDistance(thumbs[0], clientX, clientY, direction);\n    for(var i = 1; i < thumbs.length; i++){\n        var thumbDistance = getThumbDistance(thumbs[i], clientX, clientY, direction);\n        if (thumbDistance < minThumbDistance) {\n            minThumbDistance = thumbDistance;\n            thumbIndex = i;\n        }\n    }\n    return thumbIndex;\n}\nexports.getClosestThumbIndex = getClosestThumbIndex;\nfunction translate(element, x, y) {\n    element.style.transform = \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n}\nexports.translate = translate;\n// adapted from https://github.com/alexreardon/raf-schd\nvar schd = function(fn) {\n    var lastArgs = [];\n    var frameId = null;\n    var wrapperFn = function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        lastArgs = args;\n        if (frameId) {\n            return;\n        }\n        frameId = requestAnimationFrame(function() {\n            frameId = null;\n            fn.apply(void 0, lastArgs);\n        });\n    };\n    return wrapperFn;\n};\nexports.schd = schd;\nfunction replaceAt(values, index, value) {\n    var ret = values.slice(0);\n    ret[index] = value;\n    return ret;\n}\nexports.replaceAt = replaceAt;\nfunction getTrackBackground(_a) {\n    var values = _a.values, colors = _a.colors, min = _a.min, max = _a.max, _b = _a.direction, direction = _b === void 0 ? types_1.Direction.Right : _b, _c = _a.rtl, rtl = _c === void 0 ? false : _c;\n    if (rtl && direction === types_1.Direction.Right) {\n        direction = types_1.Direction.Left;\n    } else if (rtl && types_1.Direction.Left) {\n        direction = types_1.Direction.Right;\n    }\n    // sort values ascending\n    var progress = values.slice(0).sort(function(a, b) {\n        return a - b;\n    }).map(function(value) {\n        return (value - min) / (max - min) * 100;\n    });\n    var middle = progress.reduce(function(acc, point, index) {\n        return \"\".concat(acc, \", \").concat(colors[index], \" \").concat(point, \"%, \").concat(colors[index + 1], \" \").concat(point, \"%\");\n    }, \"\");\n    return \"linear-gradient(\".concat(direction, \", \").concat(colors[0], \" 0%\").concat(middle, \", \").concat(colors[colors.length - 1], \" 100%)\");\n}\nexports.getTrackBackground = getTrackBackground;\nfunction voidFn() {}\nexports.voidFn = voidFn;\nfunction assertUnreachable(x) {\n    throw new Error(\"Didn't expect to get here\");\n}\nexports.assertUnreachable = assertUnreachable;\n/**\n * Util function for grabbing the true largest width of a thumb\n * including the label\n * @param thumbEl - Thumb element to grab the largest width from\n * @param value - Thumb value, not label value\n * @param separator - Label separator value\n */ var getThumbWidth = function(thumbEl, value, separator, decimalPlaces, valueToLabel) {\n    if (valueToLabel === void 0) {\n        valueToLabel = function(value) {\n            return value;\n        };\n    }\n    var width = Math.ceil(__spreadArray([\n        thumbEl\n    ], Array.from(thumbEl.children), true).reduce(function(width, el) {\n        var elWidth = Math.ceil(el.getBoundingClientRect().width);\n        /**\n         * If a label contains a merged label value, it won't return the true\n         * label width for that Thumb. Clone the label and change the value\n         * to that individual Thumb value in order to grab the true width.\n         */ if (el.innerText && el.innerText.includes(separator) && el.childElementCount === 0) {\n            var elClone = el.cloneNode(true);\n            elClone.innerHTML = valueToLabel(value.toFixed(decimalPlaces));\n            elClone.style.visibility = \"hidden\";\n            document.body.appendChild(elClone);\n            elWidth = Math.ceil(elClone.getBoundingClientRect().width);\n            document.body.removeChild(elClone);\n        }\n        return elWidth > width ? elWidth : width;\n    }, thumbEl.getBoundingClientRect().width));\n    return width;\n};\n/**\n * Bulk of logic for thumb overlaps\n * Consider a scenario with 5 thumbs;\n * Thumb 1 overlaps with thumb 0 and thumb 2\n * Thumb 2 overlaps with thumb 3\n * We need an array that contains [0, 1, 2, 3]\n * The function needs to return the directly overlapping thumbs\n * and all thumbs overlapping linked to those and so on\n * @param index - Thumb index calculating overlaps for\n * @param offsets - Current Array of Thumb offsets for Range\n * @param thumbs - Array of Thumb elements\n * @param values - Array of Thumb values\n * @param separator - String separator for merged label values\n * @returns overlaps - Array of all overlapping thumbs from the index\n */ var getOverlaps = function(index, offsets, thumbs, values, separator, decimalPlaces, valueToLabel) {\n    if (valueToLabel === void 0) {\n        valueToLabel = function(value) {\n            return value;\n        };\n    }\n    var overlaps = [];\n    /**\n     * Recursive function for building the overlaps Array\n     * If an overlap is found, find the overlaps for that overlap\n     * @param thumbIndex current Thumb index to find overlaps from\n     */ var buildOverlaps = function(thumbIndex) {\n        var thumbXWidth = getThumbWidth(thumbs[thumbIndex], values[thumbIndex], separator, decimalPlaces, valueToLabel);\n        var thumbX = offsets[thumbIndex].x;\n        /**\n         * Iterate through the Thumb offsets, if there is a match\n         * add the thumbIndex and siblingIndex to the overlaps Array\n         *\n         * Then build overlaps from the overlapping siblingIndex\n         */ offsets.forEach(function(_a, siblingIndex) {\n            var siblingX = _a.x;\n            var siblingWidth = getThumbWidth(thumbs[siblingIndex], values[siblingIndex], separator, decimalPlaces, valueToLabel);\n            if (thumbIndex !== siblingIndex && (thumbX >= siblingX && thumbX <= siblingX + siblingWidth || thumbX + thumbXWidth >= siblingX && thumbX + thumbXWidth <= siblingX + siblingWidth)) {\n                if (!overlaps.includes(siblingIndex)) {\n                    overlaps.push(thumbIndex);\n                    overlaps.push(siblingIndex);\n                    overlaps = __spreadArray(__spreadArray([], overlaps, true), [\n                        thumbIndex,\n                        siblingIndex\n                    ], false);\n                    buildOverlaps(siblingIndex);\n                }\n            }\n        });\n    };\n    buildOverlaps(index);\n    // Sort and remove duplicates from the built overlaps\n    return Array.from(new Set(overlaps.sort()));\n};\n/**\n * A custom React Hook for calculating whether a thumb overlaps\n * another and whether labels could/should merge.\n * @param rangeRef - React ref value of Range component\n * @param values - current Range values Array\n * @param index - thumb index\n * @param step - step value, used to calculate the number of decimal places\n * @param separator - string to separate thumb values\n * @returns label value + styling for thumb label\n */ var useThumbOverlap = function(rangeRef, values, index, step, separator, valueToLabel) {\n    if (step === void 0) {\n        step = 0.1;\n    }\n    if (separator === void 0) {\n        separator = \" - \";\n    }\n    if (valueToLabel === void 0) {\n        valueToLabel = function(value) {\n            return value;\n        };\n    }\n    var decimalPlaces = (0, exports.getStepDecimals)(step);\n    // Create initial label style and value. Label value defaults to thumb value\n    var _a = (0, react_1.useState)({}), labelStyle = _a[0], setLabelStyle = _a[1];\n    var _b = (0, react_1.useState)(valueToLabel(values[index].toFixed(decimalPlaces))), labelValue = _b[0], setLabelValue = _b[1];\n    // When the rangeRef or values change, update the Thumb label values and styling\n    (0, react_1.useEffect)(function() {\n        if (rangeRef) {\n            var thumbs = rangeRef.getThumbs();\n            if (thumbs.length < 1) return;\n            var newStyle = {};\n            var offsets_1 = rangeRef.getOffsets();\n            /**\n             * Get any overlaps for the given Thumb index. This must return all linked\n             * Thumbs. So if there are 4 Thumbs and Thumbs 2, 3 and 4 overlap. If we are\n             * getting the overlaps for Thumb 1 and it overlaps only Thumb 2, we must get\n             * 2, 3 and 4 also.\n             */ var overlaps = getOverlaps(index, offsets_1, thumbs, values, separator, decimalPlaces, valueToLabel);\n            // Set a default label value of the Thumb value\n            var labelValue_1 = valueToLabel(values[index].toFixed(decimalPlaces));\n            /**\n             * If there are overlaps for the Thumb, we need to calculate the correct\n             * Label value along with the relevant styling. We only want to show a Label\n             * for the left most Thumb in an overlapping set.\n             * All other Thumbs will be set to display: none.\n             */ if (overlaps.length) {\n                /**\n                 * Get an Array of the offsets for the overlapping Thumbs\n                 * This is so we can determine if the Thumb we are looking at\n                 * is the left most thumb in an overlapping set\n                 */ var offsetsX = overlaps.reduce(function(a, c, i, s) {\n                    return a.length ? __spreadArray(__spreadArray([], a, true), [\n                        offsets_1[s[i]].x\n                    ], false) : [\n                        offsets_1[s[i]].x\n                    ];\n                }, []);\n                /**\n                 * If our Thumb is the left most Thumb, we can build a Label value\n                 * and set the style for that Label\n                 */ if (Math.min.apply(Math, offsetsX) === offsets_1[index].x) {\n                    /**\n                     * First calculate the Label value. To do this,\n                     * grab all the values for the Thumbs in our overlaps.\n                     * Then convert that to a Set and sort it whilst removing duplicates.\n                     */ var labelValues_1 = [];\n                    overlaps.forEach(function(thumb) {\n                        labelValues_1.push(values[thumb].toFixed(decimalPlaces));\n                    });\n                    /**\n                     *  Update the labelValue with the resulting Array\n                     *  joined by our defined separator\n                     */ labelValue_1 = Array.from(new Set(labelValues_1.sort(function(a, b) {\n                        return parseFloat(a) - parseFloat(b);\n                    }))).map(valueToLabel).join(separator);\n                    /**\n                     * Lastly, build the label styling. The label styling will\n                     * position the label and apply a transform so that it's centered.\n                     * We want the center point between the left edge of the left most Thumb\n                     * and the right edge of the right most Thumb.\n                     */ var first = Math.min.apply(Math, offsetsX);\n                    var last = Math.max.apply(Math, offsetsX);\n                    var lastWidth = thumbs[overlaps[offsetsX.indexOf(last)]].getBoundingClientRect().width;\n                    newStyle.left = \"\".concat(Math.abs(first - (last + lastWidth)) / 2, \"px\");\n                    newStyle.transform = \"translate(-50%, 0)\";\n                } else {\n                    // If the Thumb isn't the left most Thumb, hide the Label!\n                    newStyle.visibility = \"hidden\";\n                }\n            }\n            // Update the label value and style\n            setLabelValue(labelValue_1);\n            setLabelStyle(newStyle);\n        }\n    }, [\n        rangeRef,\n        values\n    ]);\n    return [\n        labelValue,\n        labelStyle\n    ];\n};\nexports.useThumbOverlap = useThumbOverlap;\n/**\n * Util function for calculating the distance of the center of a thumb\n * form a given mouse/touch target's position\n * @param thumbEl - Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */ function getThumbDistance(thumbEl, clientX, clientY, direction) {\n    var _a = thumbEl.getBoundingClientRect(), left = _a.left, top = _a.top, width = _a.width, height = _a.height;\n    return isVertical(direction) ? Math.abs(clientY - (top + height / 2)) : Math.abs(clientX - (left + width / 2));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-range/lib/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ReactRange.js":
/*!**********************************!*\
  !*** ./components/ReactRange.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-range */ \"(app-pages-browser)/./node_modules/react-range/lib/index.js\");\n/* __next_internal_client_entry_do_not_use__  auto */ \n\n\nclass SuperSimple extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n    render() {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_range__WEBPACK_IMPORTED_MODULE_2__.Range, {\n            step: 0.1,\n            min: 0,\n            max: 100,\n            values: this.state.values,\n            onChange: (values)=>this.setState({\n                    values\n                }),\n            renderTrack: (param)=>{\n                let { props, children } = param;\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    ...props,\n                    style: {\n                        ...props.style,\n                        height: \"6px\",\n                        width: \"100%\",\n                        backgroundColor: \"#ccc\"\n                    },\n                    children: children\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\emrel\\\\OneDrive\\\\Masa\\xfcst\\xfc\\\\bubitecek\\\\components\\\\ReactRange.js\",\n                    lineNumber: 17,\n                    columnNumber: 21\n                }, void 0);\n            },\n            renderThumb: (param)=>{\n                let { props } = param;\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    ...props,\n                    style: {\n                        ...props.style,\n                        height: \"42px\",\n                        width: \"42px\",\n                        backgroundColor: \"#999\"\n                    }\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\emrel\\\\OneDrive\\\\Masa\\xfcst\\xfc\\\\bubitecek\\\\components\\\\ReactRange.js\",\n                    lineNumber: 30,\n                    columnNumber: 21\n                }, void 0);\n            }\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\emrel\\\\OneDrive\\\\Masa\\xfcst\\xfc\\\\bubitecek\\\\components\\\\ReactRange.js\",\n            lineNumber: 10,\n            columnNumber: 13\n        }, this);\n    }\n    constructor(...args){\n        super(...args);\n        this.state = {\n            values: [\n                50\n            ]\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvUmVhY3RSYW5nZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFFK0I7QUFDSztBQUVwQyxNQUFNRSxvQkFBb0JGLDRDQUFlO0lBRXJDSSxTQUFTO1FBQ0wscUJBQ0ksOERBQUNILDhDQUFLQTtZQUNGSSxNQUFNO1lBQ05DLEtBQUs7WUFDTEMsS0FBSztZQUNMQyxRQUFRLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxNQUFNO1lBQ3pCRSxVQUFVLENBQUNGLFNBQVcsSUFBSSxDQUFDRyxRQUFRLENBQUM7b0JBQUVIO2dCQUFPO1lBQzdDSSxhQUFhO29CQUFDLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFO3FDQUM3Qiw4REFBQ0M7b0JBQ0ksR0FBR0YsS0FBSztvQkFDVEcsT0FBTzt3QkFDSCxHQUFHSCxNQUFNRyxLQUFLO3dCQUNkQyxRQUFRO3dCQUNSQyxPQUFPO3dCQUNQQyxpQkFBaUI7b0JBQ3JCOzhCQUVDTDs7Ozs7OztZQUdUTSxhQUFhO29CQUFDLEVBQUVQLEtBQUssRUFBRTtxQ0FDbkIsOERBQUNFO29CQUNJLEdBQUdGLEtBQUs7b0JBQ1RHLE9BQU87d0JBQ0gsR0FBR0gsTUFBTUcsS0FBSzt3QkFDZEMsUUFBUTt3QkFDUkMsT0FBTzt3QkFDUEMsaUJBQWlCO29CQUNyQjs7Ozs7Ozs7Ozs7O0lBS3BCOzs7YUFuQ0FWLFFBQVE7WUFBRUQsUUFBUTtnQkFBQzthQUFHO1FBQUM7O0FBb0MzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL1JlYWN0UmFuZ2UuanM/ZDI4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICdyZWFjdC1yYW5nZSc7XHJcblxyXG5jbGFzcyBTdXBlclNpbXBsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBzdGF0ZSA9IHsgdmFsdWVzOiBbNTBdIH07XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJhbmdlXHJcbiAgICAgICAgICAgICAgICBzdGVwPXswLjF9XHJcbiAgICAgICAgICAgICAgICBtaW49ezB9XHJcbiAgICAgICAgICAgICAgICBtYXg9ezEwMH1cclxuICAgICAgICAgICAgICAgIHZhbHVlcz17dGhpcy5zdGF0ZS52YWx1ZXN9XHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KHZhbHVlcykgPT4gdGhpcy5zZXRTdGF0ZSh7IHZhbHVlcyB9KX1cclxuICAgICAgICAgICAgICAgIHJlbmRlclRyYWNrPXsoeyBwcm9wcywgY2hpbGRyZW4gfSkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgey4uLnByb3BzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ucHJvcHMuc3R5bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICc2cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNjY2MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgcmVuZGVyVGh1bWI9eyh7IHByb3BzIH0pID0+IChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnByb3BzLnN0eWxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnNDJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzQycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzk5OSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59Il0sIm5hbWVzIjpbIlJlYWN0IiwiUmFuZ2UiLCJTdXBlclNpbXBsZSIsIkNvbXBvbmVudCIsInJlbmRlciIsInN0ZXAiLCJtaW4iLCJtYXgiLCJ2YWx1ZXMiLCJzdGF0ZSIsIm9uQ2hhbmdlIiwic2V0U3RhdGUiLCJyZW5kZXJUcmFjayIsInByb3BzIiwiY2hpbGRyZW4iLCJkaXYiLCJzdHlsZSIsImhlaWdodCIsIndpZHRoIiwiYmFja2dyb3VuZENvbG9yIiwicmVuZGVyVGh1bWIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ReactRange.js\n"));

/***/ })

});